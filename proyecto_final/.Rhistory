library(gridExtra)
# install packages, if necessary
library(plyr) #split-apply-combine-paradigm
#import the data
install.packages("cluster.datasets")
inyesstall.packages("languageserver")
x=2 #guarda copia en memoria
print(x)
x<-2 #no guarda en memoria,  es mejor usar este
print(x)
class(x) #tipo de dato
print(class(x))
x<-2.2
class(x)
print(class(x))
y<-"mipalo"
print(class(y))
z<-TRUE
print(class(z))
z<-21
print(class(z)) #se puede cambiar el tipo de dato
remove(x) #borra la variable x
#variables predeclaradas
print(pi)
print(month.name)
print(month.name[1]) #los vectores empiezan en 1
#fechas
fecha<-"2020-01-01"
print(fecha)
fecha<-as.Date("01-01-2020")
print(fecha)
fecha<-as.Date("01/01/2020", format="%d/%m/%Y") #formato de fecha
print(fecha)
#horas
hora<-as.POSIXct("2020-01-01 12:00:00", format="%d/%m/%Y %H:%M:%OS") #fecha y hora formato POSIX (desde 1970)
print(hora)
#vectores
v<-c(1,2,3,4,5)
print(v)
v[3] #acceder a un elemento
print(v[3])
v[3]<-10 #modificar un elemento
print(v)
print(v[0]) #tipo del vector
print(v[1:3]) #rango de elementos extremos incluidos
print(v[-1]) #todos menos el primero
print(v[-c(1,3)]) #todos menos los elementos 1 y 3
vector_impares<-seq(1,100,2) #secuencia de 1 a 100 de 2 en 2
print(vector_impares)
vector_pares<-seq(1:50) #secuencia de 1 a 50
print(vector_pares)
vector_pares<-seq(1:50)*2 #secuencia de 1 a 50 multiplicado por 2
print(vector_pares)
#matrices
m1<-matrix(1:50, 10, 5) #matriz de 10x5 con los elementos de 1 a 50
print(m1) #rellena por columnas por defecto
m2<-matrix(1:50, 10, 5, byrow=TRUE) #rellena por filas
print(m2)
print(m2[1,3]) #acceder a un elemento, primera fila tercera columna
print(m2[1,]) #primera fila
print(m2[,3]) #tercera columna
print(m2[1:3,]) #primeras 3 filas
print(m2[,1:3]) #primeras 3 columnas
print(m2[1:3,1:3]) #primeras 3 filas y columnas
print(m2[-1,]) #todas menos la primera fila
print(m2[-c(1,3),]) #todas menos la primera y tercera fila
print(m2[-1,-3]) #todas menos la primera fila y tercera columna
#listas
l1<-list(1, "hola", TRUE, c(1,2,3,4,5)) #lista con 4 elementos
print(l1)
print(l1[[1]]) #primer elemento
print(l1[[4]][2]) #segundo elemento del cuarto elemento
#dataframes
nombres<-c("Alice", "Bob", "Charlie")
edades<-c(23,19,45)
poblacion<-data.frame(nombres, edades) #dataframe con dos columnas
print(poblacion)
print(poblacion$nombres) #acceder a una columna
print(dim(poblacion)) #dimensiones
print(summary(poblacion)) #resumen de las columnas
print(str(poblacion)) #estructura del dataframe
print(head(poblacion)) #6 primeras filas
#poblacion$sexo<-c("F", "M", "M") #añadir columna al final
sexo<-c("F", "M", "M")
altura<-c(1.70, 1.80, 1.75)
poblacion<-cbind(poblacion[,c(1,2)], altura, sexo) #añadir columnas especificando el orden
print(poblacion) #así no se elimina la cabecera
poblacion$edades[2]<-20 #modificar un elemento
print(poblacion)
#subset
subpoblacion<-subset.data.frame(poblacion, select=c(nombres, altura)) #seleccionar columnas
print(subpoblacion)
subpoblacion2<-subset.data.frame(poblacion, edades>20) #filtro por valor
print(subpoblacion2)
poblacion$sangre<-c("A+", "B-", "?")
conval<-subset.data.frame(poblacion, sangre!="?") #filtro por condición
print(conval)
#estadística
print(range(poblacion$edades)) #rango
print(mean(poblacion$edades)) #media
print(sd(poblacion$edades)) #desviación estándar
print(var(poblacion$edades)) #varianza
print(table(poblacion$sexo)) #tabla de frecuencias
print(prop.table(table(poblacion$sexo))) #tabla de frecuencias relativas
#recta de regresión
poblacion$salario<-c(1000, 2000, 3000)
recta_regresion<-lm(poblacion$salario~poblacion$edades) #modelo de regresión lineal
print(recta_regresion)
#gráficos
plot(poblacion$edades, poblacion$salario) #gráfico de dispersión básico
plot(poblacion$edades, poblacion$salario, xlab="Edades", ylab="Salario", col=3, pch=16, cex=3,main="Pantalla")
#gráfico de dispersión editado
abline(2000, 0) #línea horizontal
abline(0, 100) #línea con pendiente
abline(recta_regresion, col=2) #recta de regresión
#leer archivos de datos
install.packages("readxl") #instalar paquete para leer excel
library("readxl") #instalar libreria para leer excel
datos_excel<-as.data.frame(read_excel("medidas_cuerpo2.xlsx")) #leer archivo excel
#para rutas de ficheros
#para rutas de ficheros
#rep<-"C:/Users/Usuario/Documents/medidas_cuerpo.csv"
#para rutas de ficheros
#rep<-"C:/Users/Usuario/Documents/medidas_cuerpo.csv"
#setwd(rep) #cambiar directorio de trabajo
#para rutas de ficheros
#rep<-"C:/Users/Usuario/Documents/medidas_cuerpo.csv"
#setwd(rep) #cambiar directorio de trabajo
#datos<-as.data.frame(read.csv("medidas_cuerpo.csv")) #leer archivo csv
#para rutas de ficheros
#rep<-"C:/Users/Usuario/Documents/medidas_cuerpo.csv"
#setwd(rep) #cambiar directorio de trabajo
#datos<-as.data.frame(read.csv("medidas_cuerpo.csv")) #leer archivo csv
#para rutas de ficheros
#rep<-"C:/Users/Usuario/Documents/medidas_cuerpo.csv"
#setwd(rep) #cambiar directorio de trabajo
#datos<-as.data.frame(read.csv("medidas_cuerpo.csv")) #leer archivo csv
#para rutas de ficheros
#rep<-"C:/Users/Usuario/Documents/medidas_cuerpo.csv"
#setwd(rep) #cambiar directorio de trabajo
#datos<-as.data.frame(read.csv("medidas_cuerpo.csv")) #leer archivo csv
# install packages, if necessary
library(plyr) #split-apply-combine-paradigm
library(ggplot2)
library(cluster)
library(lattice) #gráficos multivariable
library(graphics)
library(grid) #gráficos en cuadrícula
library(scales)
library(gridExtra)
#import the data
install.packages("cluster.datasets")
library(cluster.datasets)
data(all.mammals.milk.1956)
str(all.mammals.milk.1956)
all.mammals.milk.1956$name
#transform into matrix for kmeans
kmdata <- as.matrix(all.mammals.milk.1956[,2:6])
maximo<-numeric(5)
for (k in 1:5) maximo[k]<-max(kmdata[,k])
kmdata <- scale(kmdata,center=FALSE,scale=maximo)
kmdata[1:10,]
#decide number of clusters
wss <- numeric(7)
for (k in 1:7) wss[k] <- (sum(kmeans(kmdata, centers=k, nstart=25)$withinss))
plot(1:7, wss, type="b", xlab="Number of Clusters", ylab="Within Sum of Squares")
km2 = kmeans(kmdata,2, nstart=25)
km2
km3 = kmeans(kmdata,3, nstart=25)
km3
km4 = kmeans(kmdata,4, nstart=25)
km4
#prepare the data and clustering results for plotting
df = as.data.frame(kmdata)
df$cluster = factor(km4$cluster)
centers=as.data.frame(km4$centers)
g1= ggplot(data=df, aes(x=water, y=protein, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=water,y=protein, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g2 =ggplot(data=df, aes(x=water, y=fat, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=water,y=fat, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g3 = ggplot(data=df, aes(x=water, y=lactose, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=water,y=lactose, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g4 = ggplot(data=df, aes(x=water, y=ash, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=water,y=ash, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g5= ggplot(data=df, aes(x=protein, y=fat, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=protein, y=fat, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g6 =ggplot(data=df, aes(x=protein, y=lactose, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=protein, y=lactose, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g7= ggplot(data=df, aes(x=protein, y=ash, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=protein, y=ash, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g8 =ggplot(data=df, aes(x=fat, y=lactose, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=fat, y=lactose, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g9 = ggplot(data=df, aes(x=fat, y=ash, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=fat,y=ash, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
grid.arrange(arrangeGrob(grobs=list(g1 + theme(legend.position="none"),
g2 + theme(legend.position="none"),
g3 + theme(legend.position="none"),
g4 + theme(legend.position="none"),
g5 + theme(legend.position="none"),
g6 + theme(legend.position="none"),
g7 + theme(legend.position="none"),
g8 + theme(legend.position="none"),
g9 + theme(legend.position="none")),
main ="Mammals milk analysis", ncol=3))
library(plyr)
library(ggplot2)
library(cluster)
library(lattice)
library(graphics)
library(grid)
library(scales)
library(gridExtra)
install.packages("readxl") #instalar paquete para leer excel
library("readxl") #instalar libreria para leer excel
#fijar el wd
rep<-"C:/Users/hugoz/Desktop/cd_pantalla/cd_pantalla/proyecto_final"
setwd(rep)
#leer archivo excel y convertirlo a dataset
datos_conduccion<-as.data.frame(read_excel("datosconduccion.xlsx"))
#aplicar correccion para asegurar que los datos son numéricos
datos_coonduccion_c<-datos_conduccion[sapply(datos_conduccion, is.numeric)]
#hay algunos valores NA que interfieren con el escalado
#esos valores se cambian por la mediana de su columna correspondiente para que el escalado no suponga un problema
datos_coonduccion_c<-as.data.frame(lapply(datos_coonduccion_c, function(col) {
ifelse(is.na(col), median(col, na.rm = TRUE), col)
}))
#convertir a matriz para k-means
kmdata <- as.matrix(datos_coonduccion_c)
View(kmdata)
View(kmdata)
#escalado de datos
maximo<-apply(kmdata, 2, max, na.rm=TRUE)
#eliminar na, nan e inf
maximo[maximo == 0 | is.na(maximo)] <- 1
kmdata <- scale(kmdata,center=FALSE,scale=maximo)
#decidir el numero de clusters
wss <- numeric(16)
for (k in 1:16) wss[k] <- (sum(kmeans(kmdata, centers=k, nstart=25)$withinss))
plot(1:16, wss, type="b", xlab="Number of Clusters", ylab="Within Sum of Squares")
km2 = kmeans(kmdata,2, nstart=25)
km2
km3 = kmeans(kmdata,3, nstart=25)
km3
km4 = kmeans(kmdata,4, nstart=25)
km4
km5 = kmeans(kmdata,5, nstart=25)
km5
View(km4)
View(km4)
#agrupar la aceleración
accel_ejes<-subset.data.frame(datos_coonduccion_c, select=c(Accel.X, Accel.Y, Accel.Z))
View(accel_ejes)
View(accel_ejes)
#leer archivo excel y convertirlo a dataset
datos_conduccion<-as.data.frame(read_excel("datosconduccion.xlsx"))
#aplicar correccion para asegurar que los datos son numéricos
datos_coonduccion_c<-datos_conduccion[sapply(datos_conduccion, is.numeric)]
#hay algunos valores NA que interfieren con el escalado
#esos valores se cambian por la mediana de su columna correspondiente para que el escalado no suponga un problema
datos_coonduccion_c<-as.data.frame
#convertir a matriz para k-means
kmdata <- as.matrix(datos_coonduccion_c)
#escalado de datos
maximo<-apply(kmdata, 2, max, na.rm=TRUE)
#eliminar na, nan e inf
maximo[maximo == 0 | is.na(maximo)] <- 1
kmdata <- scale(kmdata,center=FALSE,scale=maximo)
#decidir el numero de clusters
wss <- numeric(16)
for (k in 1:16) wss[k] <- (sum(kmeans(kmdata, centers=k, nstart=25)$withinss))
plot(1:16, wss, type="b", xlab="Number of Clusters", ylab="Within Sum of Squares")
km2 = kmeans(kmdata,2, nstart=25)
km2
km3 = kmeans(kmdata,3, nstart=25)
km3
km4 = kmeans(kmdata,4, nstart=25)
km4
km5 = kmeans(kmdata,5, nstart=25)
km5
#representación de datos
df = as.data.frame(kmdata)
View(accel_ejes)
#representación de datos
df = as.data.frame(kmdata)
#representación de datos
df = as.data.frame(kmdata)
library(plyr)
library(ggplot2)
library(cluster)
library(lattice)
library(graphics)
library(grid)
library(scales)
library(gridExtra)
install.packages("readxl") #instalar paquete para leer excel
library("readxl") #instalar libreria para leer excel
install.packages("dplyr")
#fijar el wd
rep<-"C:/Users/hugoz/Desktop/cd_pantalla/cd_pantalla/proyecto_final"
setwd(rep)
#leer archivo excel y convertirlo a dataset
datos_conduccion<-as.data.frame(read_excel("datosconduccion.xlsx"))
#aplicar correccion para asegurar que los datos son numéricos
datos_coonduccion_c<-datos_conduccion[sapply(datos_conduccion, is.numeric)]
#hay algunos valores NA que interfieren con el escalado
#esos valores se cambian por la mediana de su columna correspondiente para que el escalado no suponga un problema
datos_coonduccion_c<-as.data.frame
#convertir a matriz para k-means
kmdata <- as.matrix(datos_coonduccion_c)
#
#
#
#convertir a matriz para k-means
kmdata <- as.matrix(datos_coonduccion_c)
#aplicar correccion para asegurar que los datos son numéricos
datos_coonduccion_c<-datos_conduccion[sapply(datos_conduccion, is.numeric)]
#hay algunos valores NA que interfieren con el escalado
#esos valores se cambian por la mediana de su columna correspondiente para que el escalado no suponga un problema
datos_coonduccion_c<-as.data.frame(lapply(datos_coonduccion_c, function(col) {
ifelse(is.na(col), median(col, na.rm = TRUE), col)
}))
#convertir a matriz para k-means
kmdata <- as.matrix(datos_coonduccion_c)
#escalado de datos
maximo<-apply(kmdata, 2, max, na.rm=TRUE)
#eliminar na, nan e inf
maximo[maximo == 0 | is.na(maximo)] <- 1
kmdata <- scale(kmdata,center=FALSE,scale=maximo)
#decidir el numero de clusters
wss <- numeric(16)
for (k in 1:16) wss[k] <- (sum(kmeans(kmdata, centers=k, nstart=25)$withinss))
plot(1:16, wss, type="b", xlab="Number of Clusters", ylab="Within Sum of Squares")
km2 = kmeans(kmdata,2, nstart=25)
km2
km3 = kmeans(kmdata,3, nstart=25)
km3
km4 = kmeans(kmdata,4, nstart=25)
km4
km5 = kmeans(kmdata,5, nstart=25)
km5
#representación de datos
df = as.data.frame(kmdata)
df$cluster = factor(km4$cluster)
centers=as.data.frame(km4$centers)
g1= ggplot(data=df, aes(x=water, y=protein, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=water,y=protein, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
install.packages("ggplot2")
g1= ggplot(data=df, aes(x=water, y=protein, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=water,y=protein, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
View(df)
g1= ggplot(data=df, aes(x=Accel.X, y=Gyro.X, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=water,y=protein, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g1= ggplot(data=df, aes(x=Accel.X, y=Gyro.X, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=Accel.X, y=Gyro.X, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g1= ggplot(data=df, aes(x=Accel.X, y=Gyro.X, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=Accel.X, y=Gyro.X, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g7= ggplot(data=df, aes(x=Engine.Load, y=Max.Speed, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=Engine.Load, y=Max.Speed, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g1= ggplot(data=df, aes(x=Accel.X, y=Gyro.X, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=Accel.X, y=Gyro.X, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g1= ggplot(data=df, aes(x=Accel.X, y=Gyro.X, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=Accel.X, y=Gyro.X, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
library(ggplot2)
g1= ggplot(data=df, aes(x=Accel.X, y=Gyro.X, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=Accel.X, y=Gyro.X, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
View(df)
View(g1)
View(g1)
g2 =ggplot(data=df, aes(x=Accel.Y, y=Gyro.Y, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=Accel.Y, y=Gyro.Y, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g3 = ggplot(data=df, aes(x=Accel.Z, y=Gyro.Z, color=cluster )) +
geom_point() + theme(legend.position="right") +
geom_point(data=centers, aes(x=Accel.Z, y=Gyro.Z, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g4 = ggplot(data=df, aes(x=RPM, y=Gear, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=RPM, y=Gear, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g5= ggplot(data=df, aes(x=RPM, y=Throttle.Position, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=RPM, y=Throttle.Position, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g6 =ggplot(data=df, aes(x=Speed, y=Fuel.Trim, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=Speed, y=Fuel.Trim, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
g7= ggplot(data=df, aes(x=Engine.Load, y=Max.Speed, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=Engine.Load, y=Max.Speed, color=as.factor(1:4)),
size=10, alpha=.3, show.legend=FALSE)
grid.arrange(arrangeGrob(grobs=list(g1 + theme(legend.position="none"),
g2 + theme(legend.position="none"),
g3 + theme(legend.position="none"),
g4 + theme(legend.position="none"),
g5 + theme(legend.position="none"),
g6 + theme(legend.position="none"),
g7 + theme(legend.position="none")),
main ="Mammals milk analysis", ncol=3))
install.packages("grid")
library(grid)
grid.arrange(arrangeGrob(grobs=list(g1 + theme(legend.position="none"),
g2 + theme(legend.position="none"),
g3 + theme(legend.position="none"),
g4 + theme(legend.position="none"),
g5 + theme(legend.position="none"),
g6 + theme(legend.position="none"),
g7 + theme(legend.position="none")),
main ="Mammals milk analysis", ncol=3))
install.packages("gridExtra")
library(gridExtra)
grid.arrange(arrangeGrob(grobs=list(g1 + theme(legend.position="none"),
g2 + theme(legend.position="none"),
g3 + theme(legend.position="none"),
g4 + theme(legend.position="none"),
g5 + theme(legend.position="none"),
g6 + theme(legend.position="none"),
g7 + theme(legend.position="none")),
main ="Mammals milk analysis", ncol=3))
